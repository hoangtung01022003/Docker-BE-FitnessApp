#!/bin/bash

echo "üöÇ Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng tr√™n Railway v·ªõi Nginx..."

# Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng Railway
echo "Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng Railway..."
env | grep -E "RAILWAY_|MYSQL|DB_|PORT|CORS_" || echo "Kh√¥ng t√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt"

# V√¥ hi·ªáu h√≥a Apache n·∫øu c√≥
if [ -f "/etc/apache2/sites-available/000-default.conf" ]; then
  echo "V√¥ hi·ªáu h√≥a Apache..."
  mv /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/000-default.conf.bak
  echo "‚úÖ Apache ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a"
fi

# Thi·∫øt l·∫≠p CORS ƒë∆°n gi·∫£n v√† an to√†n nh·∫•t
CORS_ORIGIN="*"
CORS_METHODS="GET, POST, PUT, DELETE, OPTIONS"
CORS_HEADERS="Content-Type, Authorization, X-Requested-With, Accept"

echo "CORS Origin: $CORS_ORIGIN"
echo "CORS Methods: $CORS_METHODS"
echo "CORS Headers: $CORS_HEADERS"

# Ki·ªÉm tra xem ch√∫ng ta ƒëang ·ªü trong th∆∞ m·ª•c g·ªëc c·ªßa Laravel hay kh√¥ng
if [ -f "artisan" ]; then
  LARAVEL_ROOT=$(pwd)
  echo "‚úÖ ƒê√£ ph√°t hi·ªán th∆∞ m·ª•c g·ªëc Laravel t·∫°i: $LARAVEL_ROOT"
else
  echo "‚ùå ERROR: Kh√¥ng t√¨m th·∫•y file 'artisan' trong th∆∞ m·ª•c hi·ªán t·∫°i!"
  echo "Th∆∞ m·ª•c hi·ªán t·∫°i: $(pwd)"
  echo "N·ªôi dung th∆∞ m·ª•c:"
  ls -la
  
  # T√¨m ki·∫øm file artisan trong c√°c th∆∞ m·ª•c con
  ARTISAN_PATH=$(find . -name "artisan" -type f | head -n 1)
  if [ ! -z "$ARTISAN_PATH" ]; then
    LARAVEL_ROOT=$(dirname "$ARTISAN_PATH")
    echo "T√¨m th·∫•y file artisan t·∫°i: $ARTISAN_PATH"
    echo "Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c: $LARAVEL_ROOT"
    cd "$LARAVEL_ROOT"
  fi
fi

# T·∫°o file .env t·ª´ c√°c bi·∫øn m√¥i tr∆∞·ªùng v·ªõi c√°c gi√° tr·ªã c·ª• th·ªÉ cung c·∫•p
cat > .env << EOF
APP_NAME=FitnessApp
APP_ENV=${APP_ENV:-production}
APP_KEY=${APP_KEY:-}
APP_DEBUG=true
APP_URL=${RAILWAY_PUBLIC_DOMAIN:-${APP_URL:-http://localhost}}

LOG_CHANNEL=stderr
LOG_LEVEL=debug

# K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu MySQL
DB_CONNECTION=mysql
DB_HOST=${DB_HOST:-trolley.proxy.rlwy.net}
DB_PORT=${DB_PORT:-54154}
DB_DATABASE=${DB_DATABASE:-railway}
DB_USERNAME=${DB_USERNAME:-root}
DB_PASSWORD=${DB_PASSWORD:-ARakarqbSOaCUkoUTXyGSYVMfEYVPuVY}

BROADCAST_DRIVER=${BROADCAST_DRIVER:-log}
CACHE_DRIVER=${CACHE_DRIVER:-file}
FILESYSTEM_DISK=${FILESYSTEM_DISK:-local}
QUEUE_CONNECTION=${QUEUE_CONNECTION:-sync}
SESSION_DRIVER=${SESSION_DRIVER:-cookie}
SESSION_LIFETIME=${SESSION_LIFETIME:-120}

# C·∫•u h√¨nh CORS
SANCTUM_STATEFUL_DOMAINS=${SANCTUM_STATEFUL_DOMAINS:-localhost:3000,127.0.0.1:3000,*.railway.app}
SESSION_DOMAIN=${SESSION_DOMAIN:-.railway.app}
SESSION_SECURE_COOKIE=${SESSION_SECURE_COOKIE:-true}
CORS_ALLOWED_ORIGINS=*
EOF

# T·∫°o application key n·∫øu ch∆∞a c√≥
if [ -z "$APP_KEY" ]; then
  echo "T·∫°o APP_KEY m·ªõi..."
  php artisan key:generate --force
fi

# X√°c ƒë·ªãnh PORT
PORT="${PORT:-8080}"
echo "Port ƒë∆∞·ª£c c·∫•u h√¨nh: $PORT"

# ƒê·∫£m b·∫£o c√°c th∆∞ m·ª•c framework t·ªìn t·∫°i v√† c√≥ quy·ªÅn ghi
echo "ƒê·∫£m b·∫£o c√°c th∆∞ m·ª•c framework t·ªìn t·∫°i..."
mkdir -p storage/framework/{sessions,views,cache}
mkdir -p bootstrap/cache

# ƒê·∫∑t quy·ªÅn cho c√°c th∆∞ m·ª•c quan tr·ªçng
echo "Thi·∫øt l·∫≠p quy·ªÅn truy c·∫≠p th∆∞ m·ª•c..."
chmod -R 775 storage bootstrap/cache
chown -R www-data:www-data storage bootstrap/cache

# Ki·ªÉm tra v√† ƒë·∫£m b·∫£o th∆∞ m·ª•c public t·ªìn t·∫°i
if [ ! -d "public" ]; then
  echo "‚ö†Ô∏è Th∆∞ m·ª•c public kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi th∆∞ m·ª•c public..."
  mkdir -p public
fi

# Ki·ªÉm tra file index.php t·ªìn t·∫°i trong th∆∞ m·ª•c public
if [ ! -f "public/index.php" ]; then
  echo "‚ö†Ô∏è File public/index.php kh√¥ng t·ªìn t·∫°i!"
  
  # T·∫°o file index.php chu·∫©n cho Laravel trong th∆∞ m·ª•c public
  cat > public/index.php << 'EOF_INDEX'
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());
EOF_INDEX

  echo "‚úÖ ƒê√£ t·∫°o file public/index.php"
else
  echo "‚úÖ File public/index.php ƒë√£ t·ªìn t·∫°i."
fi

# ƒê·∫£m b·∫£o file test health t·ªìn t·∫°i
echo "OK" > public/health.txt
echo "OK" > public/status.txt

# T·∫°o file phpinfo.php ƒë·ªÉ debug
echo "<?php phpinfo(); ?>" > public/phpinfo.php

# C·∫•u h√¨nh Nginx
echo "C·∫•u h√¨nh Nginx v·ªõi port $PORT..."

# ƒê·∫£m b·∫£o th∆∞ m·ª•c c·∫•u h√¨nh Nginx t·ªìn t·∫°i
mkdir -p /etc/nginx/conf.d

# T·∫°o c·∫•u h√¨nh Nginx m·ªõi v·ªõi x·ª≠ l√Ω CORS ƒë∆∞·ª£c c·∫£i thi·ªán
cat > /etc/nginx/conf.d/default.conf << EOF
server {
    listen $PORT;
    server_name _;
    root /var/www/html/public;
    index index.php;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }
    
    # # X·ª≠ l√Ω pre-flight OPTIONS request ·ªü c·∫•p ƒë·ªô server
    # if (\$request_method = OPTIONS) {
    #     add_header 'Access-Control-Allow-Origin' '*';
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
    #     add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With, Accept';
    #     add_header 'Access-Control-Max-Age' '86400';
    #     add_header 'Content-Type' 'text/plain charset=UTF-8';
    #     add_header 'Content-Length' '0';
    #     return 204;
    # }
    
    location ~ \.php$ {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }
    
    # Health check endpoints
    location = /health.txt {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }
    
    location = /status.txt {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }
}
EOF

echo "‚úÖ C·∫•u h√¨nh Nginx ƒë√£ ƒë∆∞·ª£c t·∫°o"

# ƒê·∫£m b·∫£o th∆∞ m·ª•c trong DocumentRoot t·ªìn t·∫°i
echo "Ki·ªÉm tra DocumentRoot /var/www/html/public..."
if [ ! -d "/var/www/html/public" ]; then
  echo "‚ö†Ô∏è Th∆∞ m·ª•c DocumentRoot kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi..."
  mkdir -p /var/www/html/public
fi

# Sao ch√©p c√°c t·ªáp tin t·ª´ th∆∞ m·ª•c public c·ªßa d·ª± √°n v√†o /var/www/html/public
echo "Sao ch√©p c√°c t·ªáp tin t·ª´ th∆∞ m·ª•c public v√†o DocumentRoot..."
if [ -d "public" ]; then
  cp -r public/* /var/www/html/public/ 2>/dev/null || echo "‚ùå Kh√¥ng th·ªÉ sao ch√©p files"
  
  # ƒê·∫∑t quy·ªÅn cho th∆∞ m·ª•c DocumentRoot
  chown -R www-data:www-data /var/www/html
  chmod -R 755 /var/www/html
  echo "‚úÖ ƒê√£ sao ch√©p c√°c t·ªáp tin v√†o /var/www/html/public"
else
  echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c public trong d·ª± √°n!"
fi

# T·∫°o file index.php trong DocumentRoot n·∫øu kh√¥ng t·ªìn t·∫°i
if [ ! -f "/var/www/html/public/index.php" ]; then
  echo "‚ö†Ô∏è File index.php kh√¥ng t·ªìn t·∫°i trong DocumentRoot, t·∫°o m·ªõi..."
  cat > /var/www/html/public/index.php << 'EOF_INDEX'
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());
EOF_INDEX
  echo "‚úÖ ƒê√£ t·∫°o file index.php trong DocumentRoot"
fi

# T·∫°o symbolic link t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa Laravel ƒë·∫øn /var/www/html
echo "T·∫°o symbolic links t·ª´ th∆∞ m·ª•c Laravel ƒë·∫øn /var/www/html..."
for dir in app bootstrap config database resources routes storage vendor; do
  if [ -d "$dir" ]; then
    if [ ! -d "/var/www/html/$dir" ] || [ -L "/var/www/html/$dir" ]; then
      rm -rf "/var/www/html/$dir" 2>/dev/null
      ln -sf "$(pwd)/$dir" "/var/www/html/$dir"
      echo "‚úÖ ƒê√£ li√™n k·∫øt th∆∞ m·ª•c $dir"
    else
      echo "‚ö†Ô∏è Th∆∞ m·ª•c /var/www/html/$dir ƒë√£ t·ªìn t·∫°i v√† kh√¥ng ph·∫£i symlink"
    fi
  else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c $dir trong d·ª± √°n"
  fi
done

# T·∫°o file .env trong /var/www/html
cp .env /var/www/html/.env 2>/dev/null

# C·∫≠p nh·∫≠t c·∫•u h√¨nh Supervisor ƒë·ªÉ ch·∫°y Nginx v√† PHP-FPM
echo "C·∫≠p nh·∫≠t c·∫•u h√¨nh Supervisor..."
cat > /etc/supervisor/conf.d/supervisord.conf << EOF
[supervisord]
nodaemon=true
logfile=/var/log/supervisord.log
pidfile=/var/run/supervisord.pid
user=root

[program:php-fpm]
command=php-fpm
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:nginx]
command=nginx -g "daemon off;"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
EOF

echo "‚úÖ C·∫•u h√¨nh Supervisor ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t"

# X√≥a cache
echo "X√≥a cache Laravel..."
php artisan cache:clear
php artisan config:clear
php artisan route:clear

# Ch·∫°y migration
echo "Ch·∫°y migration..."
php artisan migrate --force || echo "L·ªói khi ch·∫°y migration"

# T·∫°o symbolic link cho storage
echo "T·∫°o symbolic link..."
php artisan storage:link || echo "Kh√¥ng th·ªÉ t·∫°o symbolic link"

# T·ªëi ∆∞u ·ª©ng d·ª•ng
echo "T·ªëi ∆∞u ·ª©ng d·ª•ng..."
php artisan optimize || echo "Kh√¥ng th·ªÉ t·ªëi ∆∞u ·ª©ng d·ª•ng"

# T·∫°o file ki·ªÉm tra k·∫øt n·ªëi ƒë·ªÉ debug
cat > /var/www/html/public/connection-test.php << 'EOF'
<?php
// Hi·ªÉn th·ªã t·∫•t c·∫£ l·ªói
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

echo "<h1>Ki·ªÉm tra k·∫øt n·ªëi Laravel - MySQL</h1>";

// Ki·ªÉm tra m√¥i tr∆∞·ªùng
echo "<h2>Th√¥ng tin m√¥i tr∆∞·ªùng:</h2>";
echo "<ul>";
echo "<li>PHP version: " . phpversion() . "</li>";
echo "<li>Server: " . $_SERVER['SERVER_SOFTWARE'] . "</li>";
echo "<li>Document Root: " . $_SERVER['DOCUMENT_ROOT'] . "</li>";
echo "<li>Current directory: " . getcwd() . "</li>";
echo "</ul>";

// Ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c Laravel
echo "<h2>Ki·ªÉm tra th∆∞ m·ª•c Laravel:</h2>";
echo "<ul>";
$dirs = ['app', 'bootstrap', 'config', 'database', 'resources', 'routes', 'storage', 'vendor'];
foreach ($dirs as $dir) {
    $path = dirname($_SERVER['DOCUMENT_ROOT']) . '/' . $dir;
    echo "<li>$dir: " . (file_exists($path) ? "<span style='color:green'>T·ªìn t·∫°i</span>" : "<span style='color:red'>Kh√¥ng t·ªìn t·∫°i</span>") . "</li>";
}
echo "</ul>";

// Th·ª≠ k·∫øt n·ªëi MySQL
try {
    $db_host = getenv('DB_HOST') ?: 'trolley.proxy.rlwy.net';
    $db_port = getenv('DB_PORT') ?: '54154';
    $db_name = getenv('DB_DATABASE') ?: 'railway';
    $db_user = getenv('DB_USERNAME') ?: 'root';
    $db_pass = getenv('DB_PASSWORD') ?: 'ARakarqbSOaCUkoUTXyGSYVMfEYVPuVY';

    echo "<h2>Th√¥ng tin k·∫øt n·ªëi MySQL:</h2>";
    echo "<ul>";
    echo "<li>Host: $db_host</li>";
    echo "<li>Port: $db_port</li>";
    echo "<li>Database: $db_name</li>";
    echo "<li>Username: $db_user</li>";
    echo "</ul>";

    $pdo = new PDO("mysql:host=$db_host;port=$db_port;dbname=$db_name", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    echo "<p style='color:green'>‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!</p>";

    // Th·ª≠ truy v·∫•n
    $stmt = $pdo->query("SHOW TABLES");
    $tables = $stmt->fetchAll(PDO::FETCH_COLUMN);

    echo "<h2>Danh s√°ch b·∫£ng:</h2>";
    echo "<ul>";
    if (count($tables) > 0) {
        foreach ($tables as $table) {
            echo "<li>$table</li>";
        }
    } else {
        echo "<li>Kh√¥ng c√≥ b·∫£ng n√†o.</li>";
    }
    echo "</ul>";

} catch (PDOException $e) {
    echo "<p style='color:red'>‚ùå L·ªói k·∫øt n·ªëi MySQL: " . htmlspecialchars($e->getMessage()) . "</p>";
}
EOF

echo "üöÄ Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng v·ªõi Nginx v√† PHP-FPM..."
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
